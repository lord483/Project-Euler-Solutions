'''
Highly divisible triangular number

Problem 12

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?  '''

#from math import pow

#a = pow(2,500) - 1
# a=1
a = 7000
s = int(a * (a + 1) / 2)
print " Starting ", a, " ", s


def find_divisors(x):
    x = int(x)
    # print " in f d .. for " , x
    #x1 = x
    n = 1
    #l = int(sqrt(x))+1
    i = 1
    while(x > 1):
        i = i + 1
        c = 0
        while(x % i == 0):
            c = c + 1
            x = int(x / i)
        if c > 0:
            # print x1 , " ", i ," " , c
            n = n * (c + 1)
    return n


# print "starting " , " a= " , a, " , s= ", s ," ,num div =", find_divisors(s)

while(True):
    n1, n2 = 1, 1
    a = a + 1

    if a % 2 == 0:
        n1 = find_divisors(a / 2)
        n2 = find_divisors(a + 1)
    else:
        n1 = find_divisors(a)
        n2 = find_divisors((a + 1) / 2)

    n = n1 * n2

    if (n > 500):
        print "Found ......... ", a, " ", n, " , Triange Number =  ", a * (a + 1) / 2
        break
    if (a % 500 == 0):
        print a, " ", n, " , Triange Number =  ", a * (a + 1) / 2


'''
while(True):
    a = a+1
    s = s + a
    n = find_divisors(s)
    print(n)
    if a % 50 == 0 :
        print " num = " , a , " , sum = ", s , " , n=", n
    if n > 500:
        print " Final Result ::: num = " , a , " , sum = ", s , " , n=", n
        break
'''
